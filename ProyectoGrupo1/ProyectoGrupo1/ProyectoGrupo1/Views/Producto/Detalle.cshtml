@model ProyectoGrupo1.Models.ProductoDetalleViewModel
@using System.Text.Json

@{
    ViewData["Title"] = "Detalle del Producto";
    var imgs = Model.Imagenes ?? new List<string>();
    var ptcsJson = JsonSerializer.Serialize(Model.PTCs ?? new List<ProyectoGrupo1.Models.ProductoTallaColor>());
}

<div class="page-header mb-3">
    <h2 class="page-title">@Model.Nombre</h2>
    <span class="count-pill">@Model.Categoria</span>
</div>

<div class="row g-4">
    <div class="col-md-6">
        <div class="card-elevated">
            <div class="card-body">
                @if (imgs.Count > 0)
                {
                    <img id="mainImg" src="@imgs[0]" class="img-fluid border rounded w-100 mb-3" alt="@Model.Nombre" style="aspect-ratio: 1/1; object-fit: cover;" />
                    <div class="d-flex gap-2 flex-wrap">
                        @for (int i = 0; i < imgs.Count; i++)
                        {
                            var src = imgs[i];
                            <img src="@src" data-index="@i"
                                 class="thumb border rounded"
                                 style="width:72px;height:72px;object-fit:cover;cursor:pointer;" />
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">Sin imágenes disponibles</div>
                }
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card-elevated">
            <div class="card-body">
                <p class="text-muted mb-2">@Model.Categoria</p>
                <p>@Model.Descripcion</p>
                <h4 class="text-success">@Model.Precio.ToString("C")</h4>

                @if (TempData["Mensaje"] is string ok && !string.IsNullOrWhiteSpace(ok))
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        @ok <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                }
                @if (TempData["Error"] is string err && !string.IsNullOrWhiteSpace(err))
                {
                    <div class="alert alert-warning alert-dismissible fade show" role="alert">
                        @err <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                }

                <form asp-controller="Carrito" asp-action="Agregar" method="post" class="mt-3">
                    @Html.AntiForgeryToken()

                    <div class="mb-2">
                        <label class="form-label"><strong>Talla</strong></label>
                        <select id="tallaSelect" class="form-select" aria-label="Elegir talla">
                            <option value="">Seleccione una talla</option>
                        </select>
                    </div>

                    <div class="mb-2">
                        <label class="form-label"><strong>Color</strong></label>
                        <select id="colorSelect" class="form-select" aria-label="Elegir color">
                            <option value="">Seleccione un color</option>
                        </select>
                    </div>

                    <div class="mb-3 d-flex align-items-center gap-3">
                        <div class="d-inline-block">
                            <label class="form-label"><strong>Cantidad</strong></label>
                            <div class="input-group" style="max-width:160px">
                                <button class="btn btn-outline-secondary" type="button" data-step="-1" aria-label="Menos">–</button>
                                <input id="cantidadInput" type="number" name="cantidad" value="1" min="1" class="form-control text-center">
                                <button class="btn btn-outline-secondary" type="button" data-step="1" aria-label="Más">+</button>
                            </div>
                        </div>
                        <span id="stockBadge" class="badge bg-secondary align-self-end">Stock: —</span>
                    </div>

                    <input type="hidden" id="ptcIdInput" name="ptcId" value="0" />

                    <button id="agregarBtn" type="submit" class="btn btn-main w-100" disabled>Agregar al carrito</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
          const main = document.getElementById('mainImg');
          document.querySelectorAll('.thumb').forEach(img => {
            img.addEventListener('click', () => {
              const src = img.getAttribute('src');
              if (src && main) main.setAttribute('src', src);
            });
          });
        });

        const ptcs = @Html.Raw(ptcsJson);
        const ptcsEnStock = (ptcs ?? []).filter(p => (p?.Stock ?? 0) > 0);

        const tallaSel   = document.getElementById('tallaSelect');
        const colorSel   = document.getElementById('colorSelect');
        const cantidadEl = document.getElementById('cantidadInput');
        const ptcHidden  = document.getElementById('ptcIdInput');
        const stockBadge = document.getElementById('stockBadge');
        const addBtn     = document.getElementById('agregarBtn');

        function setOptions(select, values, placeholder) {
          select.innerHTML = '';
          const opt0 = document.createElement('option');
          opt0.value = '';
          opt0.textContent = placeholder;
          select.appendChild(opt0);
          values.forEach(v => {
            const o = document.createElement('option');
            o.value = v; o.textContent = v;
            select.appendChild(o);
          });
        }

        function llenarTallas() {
          const tallas = [...new Set(ptcsEnStock.map(x => x.NombreTalla))].sort();
          setOptions(tallaSel, tallas, 'Seleccione una talla');
          tallaSel.disabled = tallas.length === 0;
        }

        function llenarColores() {
          const talla = tallaSel.value;
          if (!talla) {
            setOptions(colorSel, [], 'Seleccione un color');
            colorSel.disabled = true;
            return;
          }
          const colores = [...new Set(ptcsEnStock.filter(x => x.NombreTalla === talla).map(x => x.NombreColor))].sort();
          setOptions(colorSel, colores, 'Seleccione un color');
          colorSel.disabled = colores.length === 0;
        }

        function actualizarPTC() {
          const talla = tallaSel.value;
          const color = colorSel.value;

          if (!talla || !color) {
            ptcHidden.value = "0";
            stockBadge.textContent = "Stock: —";
            stockBadge.className = "badge bg-secondary";
            cantidadEl.value = "1";
            cantidadEl.max = "";
            addBtn.disabled = true;
            return;
          }
          const match = (ptcsEnStock || []).find(x => x.NombreTalla === talla && x.NombreColor === color);

          if (!match) {
            ptcHidden.value = "0";
            stockBadge.textContent = "Stock: 0";
            stockBadge.className = "badge bg-danger";
            cantidadEl.value = "1";
            cantidadEl.max = "1";
            addBtn.disabled = true;
            return;
          }

          ptcHidden.value = String(match.PTCID);
          stockBadge.textContent = "Stock: " + match.Stock;
          stockBadge.className = match.Stock > 5 ? "badge bg-success"
                             : match.Stock > 0 ? "badge bg-warning text-dark" : "badge bg-danger";

          const max = Math.max(1, match.Stock);
          cantidadEl.max = String(max);
          if (+cantidadEl.value < 1) cantidadEl.value = "1";
          if (+cantidadEl.value > max) cantidadEl.value = String(max);

          addBtn.disabled = (match.Stock <= 0);
        }

        document.addEventListener('DOMContentLoaded', () => {
          if ((ptcsEnStock || []).length === 0) {
            setOptions(tallaSel, [], 'Sin stock');
            setOptions(colorSel, [], 'Sin stock');
            tallaSel.disabled = true; colorSel.disabled = true;
            cantidadEl.value = "1"; cantidadEl.disabled = true;
            stockBadge.className = "badge bg-danger"; stockBadge.textContent = "Agotado";
            addBtn.disabled = true;
            return;
          }
          llenarTallas(); llenarColores(); actualizarPTC();
        });

        tallaSel.addEventListener('change', () => { llenarColores(); actualizarPTC(); });
        colorSel.addEventListener('change', actualizarPTC);

        document.querySelectorAll('button[data-step]').forEach(btn => {
          btn.addEventListener('click', () => {
            const step = parseInt(btn.getAttribute('data-step') || '0', 10);
            const curr = parseInt(cantidadEl.value || '1', 10);
            const max  = parseInt(cantidadEl.getAttribute('max') || '99', 10);
            const next = Math.max(1, Math.min(max, curr + step));
            cantidadEl.value = String(next);
          });
        });
    </script>
}
